/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  LPPriceFeedMock,
  LPPriceFeedMockInterface,
} from "../LPPriceFeedMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressProvider",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "range",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "descrition",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotConfiguratorException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotControllerException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotUnPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainPriceStaleException",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectLimitsException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotImplementedException",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceOracleNotExistsException",
    type: "error",
  },
  {
    inputs: [],
    name: "ValueOutOfRangeException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroPriceException",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "NewController",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "lowerBound",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "upperBound",
        type: "uint256",
      },
    ],
    name: "NewLimiterParams",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "_acl",
    outputs: [
      {
        internalType: "contract IACL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "checkAndUpperBoundValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delta",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "externalController",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lowerBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeedType",
    outputs: [
      {
        internalType: "enum PriceFeedType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "setController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_lowerBound",
        type: "uint256",
      },
    ],
    name: "setLimiter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "skipPriceCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "upperBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040526000805460ff60b01b1916600160b01b1790553480156200002457600080fd5b50604051620013fb380380620013fb8339810160408190526200004791620002ea565b6000805460ff19169055828282826001600160a01b0381166200007d57604051635919af9760e11b815260040160405180910390fd5b806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e29190620003e6565b6001600160a01b03166080816001600160a01b031681525050806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200013a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001609190620003e6565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200019e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c49190620003e6565b600080546001600160a01b039290921661010002610100600160a81b03199092169190911790555080516200020190600290602084019062000211565b505060a052506200044892505050565b8280546200021f906200040b565b90600052602060002090601f0160209004810192826200024357600085556200028e565b82601f106200025e57805160ff19168380011785556200028e565b828001600101855582156200028e579182015b828111156200028e57825182559160200191906001019062000271565b506200029c929150620002a0565b5090565b5b808211156200029c5760008155600101620002a1565b80516001600160a01b0381168114620002cf57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156200030057600080fd5b6200030b84620002b7565b60208581015160408701519295509350906001600160401b03808211156200033257600080fd5b818701915087601f8301126200034757600080fd5b8151818111156200035c576200035c620002d4565b604051601f8201601f19908116603f01168101908382118183101715620003875762000387620002d4565b816040528281528a86848701011115620003a057600080fd5b600093505b82841015620003c45784840186015181850187015292850192620003a5565b82841115620003d65760008684830101525b8096505050505050509250925092565b600060208284031215620003f957600080fd5b6200040482620002b7565b9392505050565b600181811c908216806200042057607f821691505b602082108114156200044257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051610f63620004986000396000818161015b0152610aa601526000818161029a01528181610376015281816104f2015281816105de015281816106d901526108f10152610f636000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c806392eefe9b116100cd578063bc489a6511610081578063d62ada1111610066578063d62ada111461030f578063f77c479114610317578063feaf968c1461033c57600080fd5b8063bc489a65146102e9578063be622e74146102fc57600080fd5b8063a384d6ff116100b2578063a384d6ff1461028c578063a50cf2c814610295578063b09ad8a0146102e157600080fd5b806392eefe9b1461022f5780639a6fc8f51461024257600080fd5b80633fd0875f116101245780635c975abb116101095780635c975abb146102075780637284e416146102125780638456cb591461022757600080fd5b80633fd0875f146101ea57806354fd4d50146101ff57600080fd5b806312b495a81461015657806325e2237014610190578063313ce567146101c65780633f4ba83a146101e0575b600080fd5b61017d7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6000546101b6907501000000000000000000000000000000000000000000900460ff1681565b6040519015158152602001610187565b6101ce600881565b60405160ff9091168152602001610187565b6101e8610348565b005b6101f2600181565b6040516101879190610cc2565b61017d600181565b60005460ff166101b6565b61021a610436565b6040516101879190610d03565b6101e86104c4565b6101e861023d366004610d76565b6105b0565b610255610250366004610db3565b6107f8565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610187565b61017d60015481565b6102bc7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610187565b61017d610832565b6101e86102f7366004610ddf565b610844565b61017d61030a366004610ddf565b6109b3565b6101b6600181565b6000546102bc90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60016000428083610255565b6040517fd4eb5db00000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063d4eb5db090602401602060405180830381865afa1580156103d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f69190610df8565b61042c576040517f10332dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104346109c4565b565b6002805461044390610e1a565b80601f016020809104026020016040519081016040528092919081815260200182805461046f90610e1a565b80156104bc5780601f10610491576101008083540402835291602001916104bc565b820191906000526020600020905b81548152906001019060200180831161049f57829003601f168201915b505050505081565b6040517f3a41ec640000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633a41ec6490602401602060405180830381865afa15801561054e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105729190610df8565b6105a8576040517fd794b1e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610434610a41565b6040517f5f259aba0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635f259aba90602401602060405180830381865afa15801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e9190610df8565b610694576040517f61081c1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5f259aba00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f00000000000000000000000000000000000000000000000000000000000000001690635f259aba90602401602060405180830381865afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107449190610df8565b600080547fffffffffffffffffffff000000000000000000000000000000000000000000ff1691157501000000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000ff169190911761010073ffffffffffffffffffffffffffffffffffffffff841690810291909117825560405190917fe253457d9ad994ca9682fc3bbc38c890dca73a2d5ecee3809e548bac8b00d7c691a250565b60008060008060006040517f24e46f7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061083f600154610a9c565b905090565b6000547501000000000000000000000000000000000000000000900460ff16156108c357600054610100900473ffffffffffffffffffffffffffffffffffffffff1633146108be576040517f0129bb9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109a7565b6040517f5f259aba0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635f259aba90602401602060405180830381865afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109719190610df8565b6109a7576040517f0129bb9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109b081610adf565b50565b60006109be82610b80565b92915050565b6109cc610be4565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b610a49610c55565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a173390565b6000612710610acb7f000000000000000000000000000000000000000000000000000000000000000082610e9d565b610ad59084610eb5565b6109be9190610ef2565b801580610afe5750610afc81610af483610a9c565b600192915050565b155b15610b35576040517f9aadd6f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018190557f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de281610b6581610a9c565b6040805192835260208301919091520160405180910390a150565b60015460009080831015610bc0576040517f6477ba0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610bcb82610a9c565b9050808411610bda5783610bdc565b805b949350505050565b60005460ff16610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064015b60405180910390fd5b60005460ff1615610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610c4c565b60208101600e8310610cfd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208083528351808285015260005b81811015610d3057858101830151858201604001528201610d14565b81811115610d42576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215610d8857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610dac57600080fd5b9392505050565b600060208284031215610dc557600080fd5b813569ffffffffffffffffffff81168114610dac57600080fd5b600060208284031215610df157600080fd5b5035919050565b600060208284031215610e0a57600080fd5b81518015158114610dac57600080fd5b600181811c90821680610e2e57607f821691505b60208210811415610e68577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610eb057610eb0610e6e565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eed57610eed610e6e565b500290565b600082610f28577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220013674863b7eb9d6024e9d0ba4ed7e03b023566bbb788b5d6670a29484032e7a64736f6c634300080a0033";

type LPPriceFeedMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LPPriceFeedMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LPPriceFeedMock__factory extends ContractFactory {
  constructor(...args: LPPriceFeedMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "LPPriceFeedMock";
  }

  override deploy(
    addressProvider: PromiseOrValue<string>,
    range: PromiseOrValue<BigNumberish>,
    descrition: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LPPriceFeedMock> {
    return super.deploy(
      addressProvider,
      range,
      descrition,
      overrides || {}
    ) as Promise<LPPriceFeedMock>;
  }
  override getDeployTransaction(
    addressProvider: PromiseOrValue<string>,
    range: PromiseOrValue<BigNumberish>,
    descrition: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressProvider,
      range,
      descrition,
      overrides || {}
    );
  }
  override attach(address: string): LPPriceFeedMock {
    return super.attach(address) as LPPriceFeedMock;
  }
  override connect(signer: Signer): LPPriceFeedMock__factory {
    return super.connect(signer) as LPPriceFeedMock__factory;
  }
  static readonly contractName: "LPPriceFeedMock";

  public readonly contractName: "LPPriceFeedMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LPPriceFeedMockInterface {
    return new utils.Interface(_abi) as LPPriceFeedMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LPPriceFeedMock {
    return new Contract(address, _abi, signerOrProvider) as LPPriceFeedMock;
  }
}
